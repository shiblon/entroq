# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import entroq_pb2 as entroq__pb2


class EntroQStub(object):
    """EntroQ is a service that allows for access to a task queue.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TryClaim = channel.unary_unary(
                '/proto.EntroQ/TryClaim',
                request_serializer=entroq__pb2.ClaimRequest.SerializeToString,
                response_deserializer=entroq__pb2.ClaimResponse.FromString,
                )
        self.Claim = channel.unary_unary(
                '/proto.EntroQ/Claim',
                request_serializer=entroq__pb2.ClaimRequest.SerializeToString,
                response_deserializer=entroq__pb2.ClaimResponse.FromString,
                )
        self.Modify = channel.unary_unary(
                '/proto.EntroQ/Modify',
                request_serializer=entroq__pb2.ModifyRequest.SerializeToString,
                response_deserializer=entroq__pb2.ModifyResponse.FromString,
                )
        self.Tasks = channel.unary_unary(
                '/proto.EntroQ/Tasks',
                request_serializer=entroq__pb2.TasksRequest.SerializeToString,
                response_deserializer=entroq__pb2.TasksResponse.FromString,
                )
        self.Queues = channel.unary_unary(
                '/proto.EntroQ/Queues',
                request_serializer=entroq__pb2.QueuesRequest.SerializeToString,
                response_deserializer=entroq__pb2.QueuesResponse.FromString,
                )
        self.QueueStats = channel.unary_unary(
                '/proto.EntroQ/QueueStats',
                request_serializer=entroq__pb2.QueuesRequest.SerializeToString,
                response_deserializer=entroq__pb2.QueuesResponse.FromString,
                )
        self.Time = channel.unary_unary(
                '/proto.EntroQ/Time',
                request_serializer=entroq__pb2.TimeRequest.SerializeToString,
                response_deserializer=entroq__pb2.TimeResponse.FromString,
                )
        self.StreamTasks = channel.unary_stream(
                '/proto.EntroQ/StreamTasks',
                request_serializer=entroq__pb2.TasksRequest.SerializeToString,
                response_deserializer=entroq__pb2.TasksResponse.FromString,
                )


class EntroQServicer(object):
    """EntroQ is a service that allows for access to a task queue.
    """

    def TryClaim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Claim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Modify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Queues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueueStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTasks(self, request, context):
        """This is set to stream TasksResponse instead of just sending all tasks in a
        single one. Typically this will have one task per response, but it is best
        for the client to consume however many there are.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EntroQServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TryClaim': grpc.unary_unary_rpc_method_handler(
                    servicer.TryClaim,
                    request_deserializer=entroq__pb2.ClaimRequest.FromString,
                    response_serializer=entroq__pb2.ClaimResponse.SerializeToString,
            ),
            'Claim': grpc.unary_unary_rpc_method_handler(
                    servicer.Claim,
                    request_deserializer=entroq__pb2.ClaimRequest.FromString,
                    response_serializer=entroq__pb2.ClaimResponse.SerializeToString,
            ),
            'Modify': grpc.unary_unary_rpc_method_handler(
                    servicer.Modify,
                    request_deserializer=entroq__pb2.ModifyRequest.FromString,
                    response_serializer=entroq__pb2.ModifyResponse.SerializeToString,
            ),
            'Tasks': grpc.unary_unary_rpc_method_handler(
                    servicer.Tasks,
                    request_deserializer=entroq__pb2.TasksRequest.FromString,
                    response_serializer=entroq__pb2.TasksResponse.SerializeToString,
            ),
            'Queues': grpc.unary_unary_rpc_method_handler(
                    servicer.Queues,
                    request_deserializer=entroq__pb2.QueuesRequest.FromString,
                    response_serializer=entroq__pb2.QueuesResponse.SerializeToString,
            ),
            'QueueStats': grpc.unary_unary_rpc_method_handler(
                    servicer.QueueStats,
                    request_deserializer=entroq__pb2.QueuesRequest.FromString,
                    response_serializer=entroq__pb2.QueuesResponse.SerializeToString,
            ),
            'Time': grpc.unary_unary_rpc_method_handler(
                    servicer.Time,
                    request_deserializer=entroq__pb2.TimeRequest.FromString,
                    response_serializer=entroq__pb2.TimeResponse.SerializeToString,
            ),
            'StreamTasks': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTasks,
                    request_deserializer=entroq__pb2.TasksRequest.FromString,
                    response_serializer=entroq__pb2.TasksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.EntroQ', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EntroQ(object):
    """EntroQ is a service that allows for access to a task queue.
    """

    @staticmethod
    def TryClaim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/TryClaim',
            entroq__pb2.ClaimRequest.SerializeToString,
            entroq__pb2.ClaimResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Claim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/Claim',
            entroq__pb2.ClaimRequest.SerializeToString,
            entroq__pb2.ClaimResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Modify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/Modify',
            entroq__pb2.ModifyRequest.SerializeToString,
            entroq__pb2.ModifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/Tasks',
            entroq__pb2.TasksRequest.SerializeToString,
            entroq__pb2.TasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Queues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/Queues',
            entroq__pb2.QueuesRequest.SerializeToString,
            entroq__pb2.QueuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueueStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/QueueStats',
            entroq__pb2.QueuesRequest.SerializeToString,
            entroq__pb2.QueuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EntroQ/Time',
            entroq__pb2.TimeRequest.SerializeToString,
            entroq__pb2.TimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/proto.EntroQ/StreamTasks',
            entroq__pb2.TasksRequest.SerializeToString,
            entroq__pb2.TasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
