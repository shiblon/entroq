// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: entroq.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ActionType int32

const (
	ActionType_CLAIM  ActionType = 0
	ActionType_DELETE ActionType = 1
	ActionType_CHANGE ActionType = 2
	ActionType_DEPEND ActionType = 3
	ActionType_DETAIL ActionType = 4
	ActionType_INSERT ActionType = 5
	ActionType_READ   ActionType = 6
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "CLAIM",
		1: "DELETE",
		2: "CHANGE",
		3: "DEPEND",
		4: "DETAIL",
		5: "INSERT",
		6: "READ",
	}
	ActionType_value = map[string]int32{
		"CLAIM":  0,
		"DELETE": 1,
		"CHANGE": 2,
		"DEPEND": 3,
		"DETAIL": 4,
		"INSERT": 5,
		"READ":   6,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_entroq_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_entroq_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{0}
}

// TaskID contains the ID and version of a task. Together these make a unique
// identifier for that task.
type TaskID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Optional queue name. This usually comes from the task itself, so it will
	// be present in most use cases. There are some cases where it will be empty,
	// like when using admin tools with special privileges. Usually you should
	// set this, as Authorization policies will be looking for it to ensure that
	// you are allowed to change, delete, or depend on this ID based on the queue
	// name.
	Queue string `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *TaskID) Reset() {
	*x = TaskID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskID) ProtoMessage() {}

func (x *TaskID) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskID.ProtoReflect.Descriptor instead.
func (*TaskID) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{0}
}

func (x *TaskID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskID) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TaskID) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

// TaskData contains only the data portion of a task. Useful for insertion.
type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue for this task.
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// The epoch time in millis when this task becomes available.
	AtMs int64 `protobuf:"varint,2,opt,name=at_ms,json=atMs,proto3" json:"at_ms,omitempty"`
	// The task's opaque payload.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// An optional ID (UUID) for an inserted task to use.
	// Default is for the backend to assign one, and that is sufficient for many
	// cases. If you desire to make a database entry that *references* a task,
	// however, in that case it can make sense to specify an explicit task ID for
	// insertion (allowing "consume -> db update -> modify" worker cycles to
	// safely update a database entry that references to-be-inserted tasks).
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{1}
}

func (x *TaskData) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *TaskData) GetAtMs() int64 {
	if x != nil {
		return x.AtMs
	}
	return 0
}

func (x *TaskData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TaskData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TaskChange identifies a task by ID and specifies the new data it should contain.
// All fields should be filled in. Empty fields result in deleting data from that field.
type TaskChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldId   *TaskID   `protobuf:"bytes,1,opt,name=old_id,json=oldId,proto3" json:"old_id,omitempty"`
	NewData *TaskData `protobuf:"bytes,2,opt,name=new_data,json=newData,proto3" json:"new_data,omitempty"`
}

func (x *TaskChange) Reset() {
	*x = TaskChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskChange) ProtoMessage() {}

func (x *TaskChange) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskChange.ProtoReflect.Descriptor instead.
func (*TaskChange) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{2}
}

func (x *TaskChange) GetOldId() *TaskID {
	if x != nil {
		return x.OldId
	}
	return nil
}

func (x *TaskChange) GetNewData() *TaskData {
	if x != nil {
		return x.NewData
	}
	return nil
}

// Task is a complete task object, containing IDs, data, and metadata.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue for this task.
	Queue   string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// The epoch time in millis when this task becomes available.
	AtMs int64 `protobuf:"varint,4,opt,name=at_ms,json=atMs,proto3" json:"at_ms,omitempty"`
	// The UUID representing the claimant (owner) for this task.
	ClaimantId string `protobuf:"bytes,5,opt,name=claimant_id,json=claimantId,proto3" json:"claimant_id,omitempty"`
	// The task's opaque payload.
	Value []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Epoch times in millis for creation and update of this task.
	CreatedMs  int64 `protobuf:"varint,7,opt,name=created_ms,json=createdMs,proto3" json:"created_ms,omitempty"`
	ModifiedMs int64 `protobuf:"varint,8,opt,name=modified_ms,json=modifiedMs,proto3" json:"modified_ms,omitempty"`
	// The number of times this has been successfully claimed.
	Claims int32 `protobuf:"varint,9,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Task) GetAtMs() int64 {
	if x != nil {
		return x.AtMs
	}
	return 0
}

func (x *Task) GetClaimantId() string {
	if x != nil {
		return x.ClaimantId
	}
	return ""
}

func (x *Task) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Task) GetCreatedMs() int64 {
	if x != nil {
		return x.CreatedMs
	}
	return 0
}

func (x *Task) GetModifiedMs() int64 {
	if x != nil {
		return x.ModifiedMs
	}
	return 0
}

func (x *Task) GetClaims() int32 {
	if x != nil {
		return x.Claims
	}
	return 0
}

// QueueStats contains the name of the queue and the number of tasks within it.
type QueueStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumTasks     int32  `protobuf:"varint,2,opt,name=num_tasks,json=numTasks,proto3" json:"num_tasks,omitempty"`
	NumClaimed   int32  `protobuf:"varint,3,opt,name=num_claimed,json=numClaimed,proto3" json:"num_claimed,omitempty"`
	NumAvailable int32  `protobuf:"varint,4,opt,name=num_available,json=numAvailable,proto3" json:"num_available,omitempty"`
	// Maximum claims value for any task in the queue
	// (can help detect tasks that are causing crashes, etc.)
	MaxClaims int32 `protobuf:"varint,5,opt,name=max_claims,json=maxClaims,proto3" json:"max_claims,omitempty"`
}

func (x *QueueStats) Reset() {
	*x = QueueStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStats) ProtoMessage() {}

func (x *QueueStats) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStats.ProtoReflect.Descriptor instead.
func (*QueueStats) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{4}
}

func (x *QueueStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueStats) GetNumTasks() int32 {
	if x != nil {
		return x.NumTasks
	}
	return 0
}

func (x *QueueStats) GetNumClaimed() int32 {
	if x != nil {
		return x.NumClaimed
	}
	return 0
}

func (x *QueueStats) GetNumAvailable() int32 {
	if x != nil {
		return x.NumAvailable
	}
	return 0
}

func (x *QueueStats) GetMaxClaims() int32 {
	if x != nil {
		return x.MaxClaims
	}
	return 0
}

// ClaimRequest is sent to attempt to claim a task from a queue. The claimant ID
// should be unique to the requesting worker (e.g., if multiple workers are in
// the same process, they should all have different claimant IDs assigned).
type ClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party requesting a task.
	ClaimantId string `protobuf:"bytes,1,opt,name=claimant_id,json=claimantId,proto3" json:"claimant_id,omitempty"`
	// The queue names to claim a task from.
	Queues []string `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty"`
	// The duration of the claim, if/once successful.
	DurationMs int64 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// How long to sleep for a claim (not try claim) between polls. The sleep may be interruptible depending on the backend implementation.
	PollMs int64 `protobuf:"varint,4,opt,name=poll_ms,json=pollMs,proto3" json:"poll_ms,omitempty"`
}

func (x *ClaimRequest) Reset() {
	*x = ClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRequest) ProtoMessage() {}

func (x *ClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimRequest.ProtoReflect.Descriptor instead.
func (*ClaimRequest) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{5}
}

func (x *ClaimRequest) GetClaimantId() string {
	if x != nil {
		return x.ClaimantId
	}
	return ""
}

func (x *ClaimRequest) GetQueues() []string {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *ClaimRequest) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ClaimRequest) GetPollMs() int64 {
	if x != nil {
		return x.PollMs
	}
	return 0
}

// ClaimResponse is returned when a claim is fulfilled or becomes obviously impossible.
//
// For TryClaim calls, if no task is available, the task will be empty and the
// status code sent to the client will be OK.
//
// For Claim calls, the lack of a task is an error, usually a timeout or
// cancelation.
type ClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ClaimResponse) Reset() {
	*x = ClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse) ProtoMessage() {}

func (x *ClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse.ProtoReflect.Descriptor instead.
func (*ClaimResponse) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{6}
}

func (x *ClaimResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// ModifyRequest sends a request to modify a set of tasks with given
// dependencies. It is performed in a transaction, in which either all
// suggested modifications succeed and all dependencies are satisfied, or
// nothing is committed at all. A failure due to dependencies (in any
// of changes, deletes, or inserts) will be permanent.
//
// All successful changes will cause the requester to become the claimant.
type ModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimantId string        `protobuf:"bytes,1,opt,name=claimant_id,json=claimantId,proto3" json:"claimant_id,omitempty"`
	Inserts    []*TaskData   `protobuf:"bytes,2,rep,name=inserts,proto3" json:"inserts,omitempty"`
	Changes    []*TaskChange `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`
	Deletes    []*TaskID     `protobuf:"bytes,4,rep,name=deletes,proto3" json:"deletes,omitempty"`
	Depends    []*TaskID     `protobuf:"bytes,5,rep,name=depends,proto3" json:"depends,omitempty"`
}

func (x *ModifyRequest) Reset() {
	*x = ModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRequest) ProtoMessage() {}

func (x *ModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRequest.ProtoReflect.Descriptor instead.
func (*ModifyRequest) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyRequest) GetClaimantId() string {
	if x != nil {
		return x.ClaimantId
	}
	return ""
}

func (x *ModifyRequest) GetInserts() []*TaskData {
	if x != nil {
		return x.Inserts
	}
	return nil
}

func (x *ModifyRequest) GetChanges() []*TaskChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *ModifyRequest) GetDeletes() []*TaskID {
	if x != nil {
		return x.Deletes
	}
	return nil
}

func (x *ModifyRequest) GetDepends() []*TaskID {
	if x != nil {
		return x.Depends
	}
	return nil
}

// ModifyResponse returns inserted and updated tasks when successful.
// A dependency error (which is permanent) comes through as gRPC's NOT_FOUND code.
type ModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inserted []*Task `protobuf:"bytes,1,rep,name=inserted,proto3" json:"inserted,omitempty"`
	Changed  []*Task `protobuf:"bytes,2,rep,name=changed,proto3" json:"changed,omitempty"`
}

func (x *ModifyResponse) Reset() {
	*x = ModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResponse) ProtoMessage() {}

func (x *ModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResponse.ProtoReflect.Descriptor instead.
func (*ModifyResponse) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyResponse) GetInserted() []*Task {
	if x != nil {
		return x.Inserted
	}
	return nil
}

func (x *ModifyResponse) GetChanged() []*Task {
	if x != nil {
		return x.Changed
	}
	return nil
}

// ModifyDep can be returned with a gRPC NotFound status indicating which
// dependencies failed. This is done via the gRPC error return, not directly
// in the response proto.
type ModifyDep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ActionType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.ActionType" json:"type,omitempty"`
	Id   *TaskID    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Msg  string     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"` // Usually only used with type=DETAIL.
}

func (x *ModifyDep) Reset() {
	*x = ModifyDep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyDep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyDep) ProtoMessage() {}

func (x *ModifyDep) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyDep.ProtoReflect.Descriptor instead.
func (*ModifyDep) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{9}
}

func (x *ModifyDep) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_CLAIM
}

func (x *ModifyDep) GetId() *TaskID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ModifyDep) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// AuthzDep can be returned with a gRPC PermissionDenied status indicating
// which queue/action pairs were not allowed.
type AuthzDep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []ActionType `protobuf:"varint,1,rep,packed,name=actions,proto3,enum=proto.ActionType" json:"actions,omitempty"`
	// Matching.
	Exact  string `protobuf:"bytes,2,opt,name=exact,proto3" json:"exact,omitempty"`
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Errors. When type is DETAIL.
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *AuthzDep) Reset() {
	*x = AuthzDep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthzDep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthzDep) ProtoMessage() {}

func (x *AuthzDep) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthzDep.ProtoReflect.Descriptor instead.
func (*AuthzDep) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{10}
}

func (x *AuthzDep) GetActions() []ActionType {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AuthzDep) GetExact() string {
	if x != nil {
		return x.Exact
	}
	return ""
}

func (x *AuthzDep) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *AuthzDep) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// TasksRequest is sent to request a complete listing of tasks for the
// given queue. If claimant_id is empty, all tasks (not just expired
// or owned tasks) are returned.
// Next Tag: 6
type TasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimantId string `protobuf:"bytes,1,opt,name=claimant_id,json=claimantId,proto3" json:"claimant_id,omitempty"`
	Queue      string `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Limit      int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// If IDs are specified here, then any task which matches any of these IDs,
	// and simultaneously fits other specifications, will be returned.
	// If empty, all tasks that fit other specifications will be returned.
	TaskId []string `protobuf:"bytes,4,rep,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// If omit_values is true, then only metadata will be returned, no actual values.
	OmitValues bool `protobuf:"varint,5,opt,name=omit_values,json=omitValues,proto3" json:"omit_values,omitempty"`
}

func (x *TasksRequest) Reset() {
	*x = TasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksRequest) ProtoMessage() {}

func (x *TasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksRequest.ProtoReflect.Descriptor instead.
func (*TasksRequest) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{11}
}

func (x *TasksRequest) GetClaimantId() string {
	if x != nil {
		return x.ClaimantId
	}
	return ""
}

func (x *TasksRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *TasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TasksRequest) GetTaskId() []string {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TasksRequest) GetOmitValues() bool {
	if x != nil {
		return x.OmitValues
	}
	return false
}

// TasksReqponse contains the tasks requested.
type TasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *TasksResponse) Reset() {
	*x = TasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksResponse) ProtoMessage() {}

func (x *TasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksResponse.ProtoReflect.Descriptor instead.
func (*TasksResponse) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{12}
}

func (x *TasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// QueuesRequest is sent to request a listing of all known queues.
type QueuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchPrefix []string `protobuf:"bytes,1,rep,name=match_prefix,json=matchPrefix,proto3" json:"match_prefix,omitempty"`
	MatchExact  []string `protobuf:"bytes,2,rep,name=match_exact,json=matchExact,proto3" json:"match_exact,omitempty"`
	Limit       int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueuesRequest) Reset() {
	*x = QueuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuesRequest) ProtoMessage() {}

func (x *QueuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuesRequest.ProtoReflect.Descriptor instead.
func (*QueuesRequest) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{13}
}

func (x *QueuesRequest) GetMatchPrefix() []string {
	if x != nil {
		return x.MatchPrefix
	}
	return nil
}

func (x *QueuesRequest) GetMatchExact() []string {
	if x != nil {
		return x.MatchExact
	}
	return nil
}

func (x *QueuesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// QueuesResponse contains the requested list of queue statistics.
type QueuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queues []*QueueStats `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (x *QueuesResponse) Reset() {
	*x = QueuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuesResponse) ProtoMessage() {}

func (x *QueuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuesResponse.ProtoReflect.Descriptor instead.
func (*QueuesResponse) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{14}
}

func (x *QueuesResponse) GetQueues() []*QueueStats {
	if x != nil {
		return x.Queues
	}
	return nil
}

// TimeRequest asks the server for what it thinks is the current time.
type TimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeRequest) Reset() {
	*x = TimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRequest) ProtoMessage() {}

func (x *TimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRequest.ProtoReflect.Descriptor instead.
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{15}
}

// TimeResponse contains the server's idea of the current time in milliseconds
// since the epoch.
type TimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeMs int64 `protobuf:"varint,1,opt,name=time_ms,json=timeMs,proto3" json:"time_ms,omitempty"`
}

func (x *TimeResponse) Reset() {
	*x = TimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entroq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeResponse) ProtoMessage() {}

func (x *TimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_entroq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeResponse.ProtoReflect.Descriptor instead.
func (*TimeResponse) Descriptor() ([]byte, []int) {
	return file_entroq_proto_rawDescGZIP(), []int{16}
}

func (x *TimeResponse) GetTimeMs() int64 {
	if x != nil {
		return x.TimeMs
	}
	return 0
}

var File_entroq_proto protoreflect.FileDescriptor

var file_entroq_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22,
	0x5b, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x61, 0x74, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0xea, 0x01, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x74, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75,
	0x6d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x81,
	0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c,
	0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c,
	0x4d, 0x73, 0x22, 0x30, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x07, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x73, 0x22, 0x60, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x22, 0x63, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x70,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x77, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x7a, 0x44, 0x65, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6d, 0x69, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0d, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x69, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x2a, 0x5d, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x06, 0x32, 0xbd, 0x03, 0x0a,
	0x06, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x51, 0x12, 0x35, 0x0a, 0x08, 0x54, 0x72, 0x79, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_entroq_proto_rawDescOnce sync.Once
	file_entroq_proto_rawDescData = file_entroq_proto_rawDesc
)

func file_entroq_proto_rawDescGZIP() []byte {
	file_entroq_proto_rawDescOnce.Do(func() {
		file_entroq_proto_rawDescData = protoimpl.X.CompressGZIP(file_entroq_proto_rawDescData)
	})
	return file_entroq_proto_rawDescData
}

var file_entroq_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_entroq_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_entroq_proto_goTypes = []interface{}{
	(ActionType)(0),        // 0: proto.ActionType
	(*TaskID)(nil),         // 1: proto.TaskID
	(*TaskData)(nil),       // 2: proto.TaskData
	(*TaskChange)(nil),     // 3: proto.TaskChange
	(*Task)(nil),           // 4: proto.Task
	(*QueueStats)(nil),     // 5: proto.QueueStats
	(*ClaimRequest)(nil),   // 6: proto.ClaimRequest
	(*ClaimResponse)(nil),  // 7: proto.ClaimResponse
	(*ModifyRequest)(nil),  // 8: proto.ModifyRequest
	(*ModifyResponse)(nil), // 9: proto.ModifyResponse
	(*ModifyDep)(nil),      // 10: proto.ModifyDep
	(*AuthzDep)(nil),       // 11: proto.AuthzDep
	(*TasksRequest)(nil),   // 12: proto.TasksRequest
	(*TasksResponse)(nil),  // 13: proto.TasksResponse
	(*QueuesRequest)(nil),  // 14: proto.QueuesRequest
	(*QueuesResponse)(nil), // 15: proto.QueuesResponse
	(*TimeRequest)(nil),    // 16: proto.TimeRequest
	(*TimeResponse)(nil),   // 17: proto.TimeResponse
}
var file_entroq_proto_depIdxs = []int32{
	1,  // 0: proto.TaskChange.old_id:type_name -> proto.TaskID
	2,  // 1: proto.TaskChange.new_data:type_name -> proto.TaskData
	4,  // 2: proto.ClaimResponse.task:type_name -> proto.Task
	2,  // 3: proto.ModifyRequest.inserts:type_name -> proto.TaskData
	3,  // 4: proto.ModifyRequest.changes:type_name -> proto.TaskChange
	1,  // 5: proto.ModifyRequest.deletes:type_name -> proto.TaskID
	1,  // 6: proto.ModifyRequest.depends:type_name -> proto.TaskID
	4,  // 7: proto.ModifyResponse.inserted:type_name -> proto.Task
	4,  // 8: proto.ModifyResponse.changed:type_name -> proto.Task
	0,  // 9: proto.ModifyDep.type:type_name -> proto.ActionType
	1,  // 10: proto.ModifyDep.id:type_name -> proto.TaskID
	0,  // 11: proto.AuthzDep.actions:type_name -> proto.ActionType
	4,  // 12: proto.TasksResponse.tasks:type_name -> proto.Task
	5,  // 13: proto.QueuesResponse.queues:type_name -> proto.QueueStats
	6,  // 14: proto.EntroQ.TryClaim:input_type -> proto.ClaimRequest
	6,  // 15: proto.EntroQ.Claim:input_type -> proto.ClaimRequest
	8,  // 16: proto.EntroQ.Modify:input_type -> proto.ModifyRequest
	12, // 17: proto.EntroQ.Tasks:input_type -> proto.TasksRequest
	14, // 18: proto.EntroQ.Queues:input_type -> proto.QueuesRequest
	14, // 19: proto.EntroQ.QueueStats:input_type -> proto.QueuesRequest
	16, // 20: proto.EntroQ.Time:input_type -> proto.TimeRequest
	12, // 21: proto.EntroQ.StreamTasks:input_type -> proto.TasksRequest
	7,  // 22: proto.EntroQ.TryClaim:output_type -> proto.ClaimResponse
	7,  // 23: proto.EntroQ.Claim:output_type -> proto.ClaimResponse
	9,  // 24: proto.EntroQ.Modify:output_type -> proto.ModifyResponse
	13, // 25: proto.EntroQ.Tasks:output_type -> proto.TasksResponse
	15, // 26: proto.EntroQ.Queues:output_type -> proto.QueuesResponse
	15, // 27: proto.EntroQ.QueueStats:output_type -> proto.QueuesResponse
	17, // 28: proto.EntroQ.Time:output_type -> proto.TimeResponse
	13, // 29: proto.EntroQ.StreamTasks:output_type -> proto.TasksResponse
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_entroq_proto_init() }
func file_entroq_proto_init() {
	if File_entroq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_entroq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyDep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthzDep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entroq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entroq_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_entroq_proto_goTypes,
		DependencyIndexes: file_entroq_proto_depIdxs,
		EnumInfos:         file_entroq_proto_enumTypes,
		MessageInfos:      file_entroq_proto_msgTypes,
	}.Build()
	File_entroq_proto = out.File
	file_entroq_proto_rawDesc = nil
	file_entroq_proto_goTypes = nil
	file_entroq_proto_depIdxs = nil
}
