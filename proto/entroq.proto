syntax = "proto3";

package proto;

option go_package = ".;proto";

// TaskID contains the ID and version of a task. Together these make a unique
// identifier for that task.
message TaskID {
  string id = 1;
  int32 version = 2;

  // Optional queue name. This usually comes from the task itself, so it will
  // be present in most use cases. There are some cases where it will be empty,
  // like when using admin tools with special privileges. Usually you should
  // set this, as Authorization policies will be looking for it to ensure that
  // you are allowed to change, delete, or depend on this ID based on the queue
  // name.
  string queue = 3;
}

// TaskData contains only the data portion of a task. Useful for insertion.
message TaskData {
  // The name of the queue for this task.
  string queue = 1;

  // The epoch time in millis when this task becomes available.
  int64 at_ms = 2;

  // The task's opaque payload.
  bytes value = 3;

  // An optional ID (UUID) for an inserted task to use.
  // Default is for the backend to assign one, and that is sufficient for many
  // cases. If you desire to make a database entry that *references* a task,
  // however, in that case it can make sense to specify an explicit task ID for
  // insertion (allowing "consume -> db update -> modify" worker cycles to
  // safely update a database entry that references to-be-inserted tasks).
  string id = 4;
}

// TaskChange identifies a task by ID and specifies the new data it should contain.
// All fields should be filled in. Empty fields result in deleting data from that field.
message TaskChange {
  TaskID old_id = 1;
  TaskData new_data = 2;
}

// Task is a complete task object, containing IDs, data, and metadata.
message Task {
  // The name of the queue for this task.
  string queue = 1;

  string id = 2;
  int32 version = 3;

  // The epoch time in millis when this task becomes available.
  int64 at_ms = 4;


  // The UUID representing the claimant (owner) for this task.
  string claimant_id = 5;

  // The task's opaque payload.
  bytes value = 6;

  // Epoch times in millis for creation and update of this task.
  int64 created_ms = 7;
  int64 modified_ms = 8;

  // The number of times this has been successfully claimed.
  int32 claims = 9;
}

// QueueStats contains the name of the queue and the number of tasks within it.
message QueueStats {
  string name = 1;
  int32 num_tasks = 2;
  int32 num_claimed = 3;
  int32 num_available = 4;

  // Maximum claims value for any task in the queue
  // (can help detect tasks that are causing crashes, etc.)
  int32 max_claims = 5;
}

// ClaimRequest is sent to attempt to claim a task from a queue. The claimant ID
// should be unique to the requesting worker (e.g., if multiple workers are in
// the same process, they should all have different claimant IDs assigned).
message ClaimRequest {
  // The party requesting a task.
  string claimant_id = 1;

  // The queue names to claim a task from.
  repeated string queues = 2;

  // The duration of the claim, if/once successful.
  int64 duration_ms = 3;

  // How long to sleep for a claim (not try claim) between polls. The sleep may be interruptible depending on the backend implementation.
  int64 poll_ms = 4;
}

// ClaimResponse is returned when a claim is fulfilled or becomes obviously impossible.
//
// For TryClaim calls, if no task is available, the task will be empty and the
// status code sent to the client will be OK.
//
// For Claim calls, the lack of a task is an error, usually a timeout or
// cancelation.
message ClaimResponse {
  Task task = 1;
}

// ModifyRequest sends a request to modify a set of tasks with given
// dependencies. It is performed in a transaction, in which either all
// suggested modifications succeed and all dependencies are satisfied, or
// nothing is committed at all. A failure due to dependencies (in any
// of changes, deletes, or inserts) will be permanent.
//
// All successful changes will cause the requester to become the claimant.
message ModifyRequest {
  string claimant_id = 1;

  repeated TaskData inserts = 2;
  repeated TaskChange changes = 3;
  repeated TaskID deletes = 4;
  repeated TaskID depends = 5;
}

// ModifyResponse returns inserted and updated tasks when successful.
// A dependency error (which is permanent) comes through as gRPC's NOT_FOUND code.
message ModifyResponse {
  repeated Task inserted = 1;
  repeated Task changed = 2;
}

enum ActionType {
  CLAIM = 0;
  DELETE = 1;
  CHANGE = 2;
  DEPEND = 3;
  DETAIL = 4;
  INSERT = 5;

  READ = 6;
}

// ModifyDep can be returned with a gRPC NotFound status indicating which
// dependencies failed. This is done via the gRPC error return, not directly
// in the response proto.
message ModifyDep {
  ActionType type = 1;
  TaskID id = 2;
  string msg = 3; // Usually only used with type=DETAIL.
}

// AuthzDep can be returned with a gRPC PermissionDenied status indicating
// which queue/action pairs were not allowed.
message AuthzDep {
  repeated ActionType actions = 1;
  string exact = 2; // Double as an error message field for ActionType DETAIL.
  string prefix = 3;
}

// TasksRequest is sent to request a complete listing of tasks for the
// given queue. If claimant_id is empty, all tasks (not just expired
// or owned tasks) are returned.
// Next Tag: 6
message TasksRequest {
  string claimant_id = 1;
  string queue = 2;
  int32 limit = 3;

  // If IDs are specified here, then any task which matches any of these IDs,
  // and simultaneously fits other specifications, will be returned.
  // If empty, all tasks that fit other specifications will be returned.
  repeated string task_id = 4;

  // If omit_values is true, then only metadata will be returned, no actual values.
  bool omit_values = 5;
}

// TasksReqponse contains the tasks requested.
message TasksResponse {
  repeated Task tasks = 1;
}

// QueuesRequest is sent to request a listing of all known queues.
message QueuesRequest {
  repeated string match_prefix = 1;
  repeated string match_exact = 2;

  int32 limit = 3;
}

// QueuesResponse contains the requested list of queue statistics.
message QueuesResponse {
  repeated QueueStats queues = 1;
}

// TimeRequest asks the server for what it thinks is the current time.
message TimeRequest {
}

// TimeResponse contains the server's idea of the current time in milliseconds
// since the epoch.
message TimeResponse {
  int64 time_ms = 1;
}

// EntroQ is a service that allows for access to a task queue.
service EntroQ {
  rpc TryClaim(ClaimRequest) returns (ClaimResponse);
  rpc Claim(ClaimRequest) returns (ClaimResponse);
  rpc Modify(ModifyRequest) returns (ModifyResponse);
  rpc Tasks(TasksRequest) returns (TasksResponse);
  rpc Queues(QueuesRequest) returns (QueuesResponse);
  rpc QueueStats(QueuesRequest) returns (QueuesResponse);
  rpc Time(TimeRequest) returns (TimeResponse);

  // This is set to stream TasksResponse instead of just sending all tasks in a
  // single one. Typically this will have one task per response, but it is best
  // for the client to consume however many there are.
  rpc StreamTasks(TasksRequest) returns (stream TasksResponse);
}
