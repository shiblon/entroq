// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntroQClient is the client API for EntroQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntroQClient interface {
	TryClaim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
	Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
	Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
	Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error)
	Queues(ctx context.Context, in *QueuesRequest, opts ...grpc.CallOption) (*QueuesResponse, error)
	QueueStats(ctx context.Context, in *QueuesRequest, opts ...grpc.CallOption) (*QueuesResponse, error)
	Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error)
	// This is set to stream TasksResponse instead of just sending all tasks in a
	// single one. Typically this will have one task per response, but it is best
	// for the client to consume however many there are.
	StreamTasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (EntroQ_StreamTasksClient, error)
}

type entroQClient struct {
	cc grpc.ClientConnInterface
}

func NewEntroQClient(cc grpc.ClientConnInterface) EntroQClient {
	return &entroQClient{cc}
}

func (c *entroQClient) TryClaim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/TryClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error) {
	out := new(TasksResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/Tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) Queues(ctx context.Context, in *QueuesRequest, opts ...grpc.CallOption) (*QueuesResponse, error) {
	out := new(QueuesResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/Queues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) QueueStats(ctx context.Context, in *QueuesRequest, opts ...grpc.CallOption) (*QueuesResponse, error) {
	out := new(QueuesResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/QueueStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/proto.EntroQ/Time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entroQClient) StreamTasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (EntroQ_StreamTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &EntroQ_ServiceDesc.Streams[0], "/proto.EntroQ/StreamTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &entroQStreamTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntroQ_StreamTasksClient interface {
	Recv() (*TasksResponse, error)
	grpc.ClientStream
}

type entroQStreamTasksClient struct {
	grpc.ClientStream
}

func (x *entroQStreamTasksClient) Recv() (*TasksResponse, error) {
	m := new(TasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EntroQServer is the server API for EntroQ service.
// All implementations must embed UnimplementedEntroQServer
// for forward compatibility
type EntroQServer interface {
	TryClaim(context.Context, *ClaimRequest) (*ClaimResponse, error)
	Claim(context.Context, *ClaimRequest) (*ClaimResponse, error)
	Modify(context.Context, *ModifyRequest) (*ModifyResponse, error)
	Tasks(context.Context, *TasksRequest) (*TasksResponse, error)
	Queues(context.Context, *QueuesRequest) (*QueuesResponse, error)
	QueueStats(context.Context, *QueuesRequest) (*QueuesResponse, error)
	Time(context.Context, *TimeRequest) (*TimeResponse, error)
	// This is set to stream TasksResponse instead of just sending all tasks in a
	// single one. Typically this will have one task per response, but it is best
	// for the client to consume however many there are.
	StreamTasks(*TasksRequest, EntroQ_StreamTasksServer) error
	mustEmbedUnimplementedEntroQServer()
}

// UnimplementedEntroQServer must be embedded to have forward compatible implementations.
type UnimplementedEntroQServer struct {
}

func (UnimplementedEntroQServer) TryClaim(context.Context, *ClaimRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryClaim not implemented")
}
func (UnimplementedEntroQServer) Claim(context.Context, *ClaimRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (UnimplementedEntroQServer) Modify(context.Context, *ModifyRequest) (*ModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedEntroQServer) Tasks(context.Context, *TasksRequest) (*TasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tasks not implemented")
}
func (UnimplementedEntroQServer) Queues(context.Context, *QueuesRequest) (*QueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queues not implemented")
}
func (UnimplementedEntroQServer) QueueStats(context.Context, *QueuesRequest) (*QueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueStats not implemented")
}
func (UnimplementedEntroQServer) Time(context.Context, *TimeRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Time not implemented")
}
func (UnimplementedEntroQServer) StreamTasks(*TasksRequest, EntroQ_StreamTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTasks not implemented")
}
func (UnimplementedEntroQServer) mustEmbedUnimplementedEntroQServer() {}

// UnsafeEntroQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntroQServer will
// result in compilation errors.
type UnsafeEntroQServer interface {
	mustEmbedUnimplementedEntroQServer()
}

func RegisterEntroQServer(s grpc.ServiceRegistrar, srv EntroQServer) {
	s.RegisterService(&EntroQ_ServiceDesc, srv)
}

func _EntroQ_TryClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).TryClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/TryClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).TryClaim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).Claim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).Modify(ctx, req.(*ModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).Tasks(ctx, req.(*TasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_Queues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).Queues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/Queues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).Queues(ctx, req.(*QueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_QueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).QueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/QueueStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).QueueStats(ctx, req.(*QueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntroQServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EntroQ/Time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntroQServer).Time(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntroQ_StreamTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntroQServer).StreamTasks(m, &entroQStreamTasksServer{stream})
}

type EntroQ_StreamTasksServer interface {
	Send(*TasksResponse) error
	grpc.ServerStream
}

type entroQStreamTasksServer struct {
	grpc.ServerStream
}

func (x *entroQStreamTasksServer) Send(m *TasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EntroQ_ServiceDesc is the grpc.ServiceDesc for EntroQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntroQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EntroQ",
	HandlerType: (*EntroQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryClaim",
			Handler:    _EntroQ_TryClaim_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _EntroQ_Claim_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _EntroQ_Modify_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _EntroQ_Tasks_Handler,
		},
		{
			MethodName: "Queues",
			Handler:    _EntroQ_Queues_Handler,
		},
		{
			MethodName: "QueueStats",
			Handler:    _EntroQ_QueueStats_Handler,
		},
		{
			MethodName: "Time",
			Handler:    _EntroQ_Time_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTasks",
			Handler:       _EntroQ_StreamTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "entroq.proto",
}
